import AsyncStorage from '@react-native-async-storage/async-storage';
import { updateUserExpLevel } from './api';
import { DeviceEventEmitter } from 'react-native';

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì EXP ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏£‡∏∞‡∏î‡∏±‡∏ö
export const calculateExpToLevelUp = (level) => {
  return 100 + (level * 50);
};

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏•‡πÄ‡∏ß‡∏•‡∏à‡∏≤‡∏Å EXP ‡∏™‡∏∞‡∏™‡∏° ‡πÅ‡∏•‡∏∞‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏•‡∏á‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
export const updateLevelBasedOnExp = async (currentExp, currentLevel, onLevelUp) => {
    let newLevel = currentLevel;
    let expThreshold = calculateExpToLevelUp(newLevel);
    let remainingExp = currentExp; // ‡πÄ‡∏Å‡πá‡∏ö‡∏Ñ‡πà‡∏≤ EXP ‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠
  
    console.log(`üîç ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡πÄ‡∏ß‡∏•‡∏≠‡∏±‡∏õ: EXP ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô ${currentExp}, Level ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô ${newLevel}, ‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ EXP ${expThreshold}`);
  
    while (remainingExp >= expThreshold) {
      remainingExp -= expThreshold; // ‡πÉ‡∏ä‡πâ EXP ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏≠‡∏±‡∏õ‡πÄ‡∏•‡πÄ‡∏ß‡∏•
      newLevel += 1;
      expThreshold = calculateExpToLevelUp(newLevel);
      console.log(`‚¨ÜÔ∏è ‡πÄ‡∏•‡πÄ‡∏ß‡∏•‡∏≠‡∏±‡∏õ! Level ‡πÉ‡∏´‡∏°‡πà: ${newLevel}, EXP ‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠: ${remainingExp}, ‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ EXP ‡∏ñ‡∏±‡∏î‡πÑ‡∏õ: ${expThreshold}`);
    }
  
    if (newLevel !== currentLevel) {
      console.log(`üéâ ‡πÄ‡∏•‡πÄ‡∏ß‡∏•‡∏≠‡∏±‡∏õ! ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å onLevelUp ‡πÉ‡∏´‡∏°‡πà: Level ${newLevel}`);
      onLevelUp(newLevel);
      DeviceEventEmitter.emit('levelUp', { newLevel });
    } else {
      console.log(`‚úÖ ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á Level`);
    }
  
    const userId = await AsyncStorage.getItem('userId');
    await updateUserExpLevel(userId, remainingExp, newLevel);
  
    return newLevel;
};