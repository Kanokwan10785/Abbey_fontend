import AsyncStorage from '@react-native-async-storage/async-storage';
import { updateUserExpLevel } from './api';
import { DeviceEventEmitter } from 'react-native';

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì EXP ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏£‡∏∞‡∏î‡∏±‡∏ö
export const calculateExpToLevelUp = (level) => {
  return 100 + (level * 50);
};

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏•‡πÄ‡∏ß‡∏•‡∏à‡∏≤‡∏Å EXP ‡∏™‡∏∞‡∏™‡∏° ‡πÅ‡∏•‡∏∞‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏•‡∏á‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
export const updateLevelBasedOnExp = async (currentExp, currentLevel, onLevelUp) => {
  let newLevel = currentLevel;
  let expForNextLevel = calculateExpToLevelUp(newLevel);

  while (currentExp >= expForNextLevel) {
    currentExp -= expForNextLevel;
    newLevel += 1;
    expForNextLevel = calculateExpToLevelUp(newLevel);
    console.log(`üîº Level Up! New Level: ${newLevel}, Remaining EXP: ${currentExp}, Next Level EXP: ${expForNextLevel}`);
  }

  if (newLevel !== currentLevel) {
    console.log(`üéâ Level Up Triggered! Level: ${newLevel}`);
    onLevelUp(newLevel);
    DeviceEventEmitter.emit('levelUp', { newLevel });
    DeviceEventEmitter.emit('expUpdated'); // ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÉ‡∏´‡πâ‡πÇ‡∏´‡∏•‡∏î EXP ‡πÉ‡∏´‡∏°‡πà
  }

  const userId = await AsyncStorage.getItem('userId');
  await updateUserExpLevel(userId, currentExp, newLevel);

  return { newLevel, currentExp, expForNextLevel };
};
