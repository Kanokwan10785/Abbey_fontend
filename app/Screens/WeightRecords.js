import React, { useState, useEffect } from 'react';
import { View, Text, TextInput, TouchableOpacity, StyleSheet, Dimensions, DeviceEventEmitter, Modal, ScrollView } from 'react-native';
import { LineChart } from 'react-native-chart-kit';
import AsyncStorage from '@react-native-async-storage/async-storage';
import { fetchWeightRecords, findRecordByDate, saveWeightRecord, getUserId, saveWeightUesr, updateWeightRecord } from './apiExercise';
import { fetchUserProfile } from './api';

const WeightRecords = () => {
  const [weightData, setWeightData] = useState([]);
  const [dateLabels, setDateLabels] = useState([]);
  const [isModalVisible, setIsModalVisible] = useState(false);
  const [newWeight, setNewWeight] = useState('');
  const [isSaveAlertVisible, setSaveAlertVisible] = useState(false);
  const [isDataPointModalVisible, setDataPointModalVisible] = useState(false);
  const [selectedWeight, setSelectedWeight] = useState(null);
  const [selectedDate, setSelectedDate] = useState(null);

  const formatDate = (dateString) => {
    const date = new Date(dateString);
    const day = String(date.getDate()).padStart(2, '0');
    const monthNames = [
      '‡∏°.‡∏Ñ.', '‡∏Å.‡∏û.', '‡∏°‡∏µ.‡∏Ñ.', '‡πÄ‡∏°.‡∏¢.', '‡∏û.‡∏Ñ.', '‡∏°‡∏¥.‡∏¢.',
      '‡∏Å.‡∏Ñ.', '‡∏™.‡∏Ñ.', '‡∏Å.‡∏¢.', '‡∏ï.‡∏Ñ.', '‡∏û.‡∏¢.', '‡∏ò.‡∏Ñ.',
    ];
    const month = monthNames[date.getMonth()];
    const year = String(date.getFullYear() + 543).slice(-2); // ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏õ‡∏µ ‡∏û.‡∏®. ‡πÅ‡∏•‡∏∞‡πÄ‡∏≠‡∏≤‡πÄ‡∏â‡∏û‡∏≤‡∏∞ 2 ‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢
    return `${day} ${month} ${year}`;
  };

  const fetchData = async () => {
    try {
      const userId = await getUserId();
      const records = await fetchWeightRecords(userId);
  
      if (records.length === 0) {
        // ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
        const userData = await fetchUserProfile(userId);
        const userWeight = userData.weight || 0;
        const currentDate = new Date().toISOString().split('T')[0];
  
        if (userWeight > 0) {
          // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö
          await saveWeightRecord(userWeight, currentDate, userId);
          setWeightData([userWeight]);
          setDateLabels([formatDate(currentDate)]);
        }
      } else {
        // ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡πÅ‡∏•‡∏∞‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡∏≤‡∏°‡∏õ‡∏Å‡∏ï‡∏¥
        const sortedData = records.sort((a, b) => new Date(a.attributes.date) - new Date(b.attributes.date));
        setWeightData(sortedData.map(item => item.attributes.weight));
        setDateLabels(sortedData.map(item => formatDate(item.attributes.date)));
      }
    } catch (error) {
      alert('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ');
    }
  }; 

  const handleSaveData = async () => {
    const weightValue = parseFloat(newWeight);
    const currentDate = new Date().toISOString().split('T')[0];
    if (!isNaN(weightValue) && weightValue > 20 && weightValue <= 200) {
      try {
        const userId = await getUserId();
        // console.log('Saving weight to API:', weightValue); // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        // console.log('UserId to API:', userId);

        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ record ‡πÉ‡∏ô‡∏ß‡∏±‡∏ô‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        const existingRecord = await findRecordByDate(userId, currentDate);
        if (existingRecord) {
          // ‡∏´‡∏≤‡∏Å‡∏°‡∏µ record ‡πÉ‡∏ô‡∏ß‡∏±‡∏ô‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô ‡πÉ‡∏ä‡πâ PUT ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï
          const recordId = existingRecord.id; // ID ‡∏Ç‡∏≠‡∏á record
          await updateWeightRecord(recordId, weightValue); // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏¢‡∏Å‡πÑ‡∏ß‡πâ
        } else {
          // ‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏°‡∏µ record ‡πÉ‡∏ä‡πâ POST ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á record ‡πÉ‡∏´‡∏°‡πà
          await saveWeightRecord(weightValue, currentDate, userId);
        }
  
        // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡πÉ‡∏ô users table
        await saveWeightUesr(weightValue, userId);

        // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà‡∏à‡∏≤‡∏Å‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì BMI
        const userData = await fetchUserProfile(userId);
        const height = userData.height;
        const newBmi = (weightValue / ((height / 100) ** 2)).toFixed(2);
        
        await AsyncStorage.setItem(`bmi-${userId}`, newBmi); // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å BMI ‡πÉ‡∏ô AsyncStorage

        // ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï
        DeviceEventEmitter.emit('weightUpdated'); // ‡∏™‡πà‡∏á‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏ß‡πà‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á WeightRecords
        DeviceEventEmitter.emit('WeightRecordsUpdated', { bmi: newBmi }); // ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÉ‡∏´‡πâ BottomProfile ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà
        DeviceEventEmitter.emit('bmiUpdatedClothingScreen'); // ‡∏™‡πà‡∏á Event ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÉ‡∏´‡πâ‡∏´‡∏ô‡πâ‡∏≤ ClothingScreen.js ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà
        setTimeout(() => {                        
            DeviceEventEmitter.emit('bmiUpdated');
        }, 1000); // ‡∏£‡∏≠ 1 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ

        setNewWeight('');
        setIsModalVisible(false);
        setSaveAlertVisible(true); // ‡πÅ‡∏™‡∏î‡∏á alert ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
        fetchData(); // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà
      } catch (error) {
        console.error('Error saving weight data:', error);
        alert('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•');
      }
    } else {
      alert('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á (20-200 ‡∏Å‡∏¥‡πÇ‡∏•‡∏Å‡∏£‡∏±‡∏°)');
    }
  };

  const handleDataPointClick = ({ value, index }) => {
    setSelectedWeight(value);
    setSelectedDate(dateLabels[index]);
    setDataPointModalVisible(true);
  };  

  const CustomAlertSaveWeight = ({ visible, onClose }) => (
    <Modal
      animationType="fade"
      transparent={true}
      visible={visible}
      onRequestClose={onClose}
    >
      <View style={styles.customAlertContainer}>
        <View style={styles.customAlertBox}>
          <Text style={styles.customAlertTitle}>‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!</Text>
          <Text style={styles.customAlertMessage}>‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏ñ‡∏π‡∏Å‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÅ‡∏•‡πâ‡∏ß</Text>
          <TouchableOpacity style={styles.customAlertButton} onPress={onClose}>
            <Text style={styles.customAlertButtonText}>OK</Text>
          </TouchableOpacity>
        </View>
      </View>
    </Modal>
  );

  useEffect(() => {
    fetchData();
  }, []);

  const handleCancel = () => {
    setNewWeight('');
    setIsModalVisible(false);
  };

  return (
    <View style={styles.container}>
      <View style={[styles.weightgraphHeader, { height: 75 }]}>
        <Text style={styles.graphTitle}>‡∏Å‡∏£‡∏≤‡∏ü‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å</Text>
        <View style={styles.graphHeader}>
          <TouchableOpacity onPress={() => setIsModalVisible(true)}>
            <Text style={styles.graphsaveButtonText}>‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å</Text>
          </TouchableOpacity>
        </View>
      </View>

      <View style={styles.graphContainer}>
          {/* üîπ ‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô / ‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î / ‡∏ï‡πà‡∏≥‡∏™‡∏∏‡∏î */}
      {weightData.length > 0 && (
          <View style={styles.weightSummaryContainer}>
            {/* ‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô */}
            <View style={styles.currentWeightContainer}>
              <Text style={styles.weightLabel}>‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô</Text>
              <View style={styles.weightValueContainer}>
                <Text style={styles.currentWeight}>{weightData[weightData.length - 1]}</Text>
                <Text style={styles.weightUnit}>kg</Text>
              </View>
            </View>

            {/* ‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î & ‡∏ï‡πà‡∏≥‡∏™‡∏∏‡∏î */}
            <View style={styles.weightStatsContainer}>
              <Text style={styles.weightStatLabel}>‡∏´‡∏ô‡∏±‡∏Å‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î: <Text style={styles.weightStatValue}>{Math.max(...weightData)}</Text></Text>
              <Text style={styles.weightStatLabel}>‡πÄ‡∏ö‡∏≤‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î: <Text style={styles.weightStatValue}>{Math.min(...weightData)}</Text></Text>
            </View>
          </View>
        )}
        {weightData.length > 0 ? (
          <ScrollView horizontal>
          <LineChart
            data={{
              labels: dateLabels,
              datasets: [
                {
                 data: weightData,
                  // color: (opacity = 1) => `rgba(34, 202, 236, ${opacity})`,
                  strokeWidth: 2,
                },
              ],
            }}
            width={Math.max(Dimensions.get('window').width, weightData.length * 80)} // ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏ß‡πâ‡∏≤‡∏á‡∏Ç‡∏≠‡∏á‡∏Å‡∏£‡∏≤‡∏ü‡∏Ç‡∏∂‡πâ‡∏ô‡∏Å‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏à‡∏∏‡∏î
            height={250}
            yAxisSuffix="kg"
            // fromZero={true} // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏ó‡∏µ‡πà 0
            yAxisInterval={10} // ‡πÅ‡∏™‡∏î‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ó‡∏µ‡∏•‡∏∞ 10
            verticalLabelRotation={0} //‡∏õ‡∏£‡∏±‡∏ö‡∏°‡∏∏‡∏°‡∏Ç‡∏≠‡∏á‡∏õ‡πâ‡∏≤‡∏¢‡∏Å‡∏≥‡∏Å‡∏±‡∏ö‡πÅ‡∏Å‡∏ô x
            segments={7} // ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏™‡πâ‡∏ô‡∏™‡πÄ‡∏Å‡∏•‡πÅ‡∏ô‡∏ß‡∏ô‡∏≠‡∏ô
            chartConfig={{
              backgroundGradientFrom: "rgb(215, 143, 61)",
              backgroundGradientTo: "rgb(228, 134, 26)",
              decimalPlaces: 2, //‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏®‡∏ô‡∏¥‡∏¢‡∏°‡∏ó‡∏µ‡πà‡πÅ‡∏™‡∏î‡∏á
              withInnerLines: false, // ‡∏õ‡∏¥‡∏î‡πÄ‡∏™‡πâ‡∏ô‡∏†‡∏≤‡∏¢‡πÉ‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏•‡∏î‡∏Å‡∏≤‡∏£‡∏£‡∏ö‡∏Å‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏ï‡∏∞
              color: (opacity = 1) => `rgba(255, 255, 255, ${opacity})`,
              labelColor: (opacity = 1) => `rgba(255, 255, 255, ${opacity})`,
              propsForDots: {
                r: '8',
                strokeWidth: '3',
                stroke: '#ffa726',
              },
              propsForBackgroundLines: {
                stroke: '#FFD580', // ‡∏™‡∏µ‡∏Ç‡∏≠‡∏á‡πÄ‡∏™‡πâ‡∏ô‡πÅ‡∏ô‡∏ß‡∏ô‡∏≠‡∏ô‡πÉ‡∏ô‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á
              },
            }}
            style={{
              marginVertical: 8,
              borderRadius: 10, // ‡∏°‡∏∏‡∏°‡πÇ‡∏Ñ‡πâ‡∏á
              // borderWidth: 2,
              // borderColor: '#F6A444', // ‡∏Ç‡∏≠‡∏ö‡∏£‡∏≠‡∏ö‡∏Å‡∏£‡∏≤‡∏ü
            }}
            onDataPointClick={handleDataPointClick}
              renderDotContent={({ x, y, index }) => (
                <View
                  key={index}
                  style={{
                    position: 'absolute',
                    left: x + 12,
                    top: y - 260,
                    backgroundColor: 'rgba(0,0,0,0.5)',
                    paddingHorizontal: 5,
                    paddingVertical: 2,
                    borderRadius: 5,
                  }}
                >
                  <Text style={{ color: '#FFF', fontSize: 10, fontWeight: 'bold' }}>
                    {weightData[index]} kg
                  </Text>
                </View>
              )}
            />
          </ScrollView>
        ) : (
          <Text style={styles.noDataText}>‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å</Text>
        )}
      </View>

      {/* Modal ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡∏ó‡∏µ‡πà‡πÅ‡∏ï‡∏∞ */}
      <Modal
        visible={isDataPointModalVisible}
        animationType="fade"
        transparent={true}
        onRequestClose={() => setDataPointModalVisible(false)}
      >
        <View style={styles.customAlertContainer}>
          <View style={styles.customAlertBoxGraph}>
            <Text style={styles.customAlertTitle}>‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà {selectedDate} </Text>
            <View style={styles.weightDisplay}>
              <Text style={styles.customAlertMessageGraph}>
                {selectedWeight}
              </Text>
              <Text style={styles.customAlertMessageText}>
                kg
              </Text>
            </View>
            <TouchableOpacity
              style={styles.customAlertButton}
              onPress={() => setDataPointModalVisible(false)}
            >
              <Text style={styles.customAlertButtonText}>OK</Text>
            </TouchableOpacity>
          </View>
        </View>
      </Modal>

      {/* Modal ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡πÅ‡∏•‡∏∞‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà */}
      <Modal
        visible={isModalVisible}
        animationType="slide"
        transparent={true}
        onRequestClose={() => setIsModalVisible(false)}
      >
        <View style={styles.modalContainer}>
          <View style={styles.modalContent}>
            <Text style={styles.modalTitle}>‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å</Text>
            <TextInput
              style={styles.inputWeigh}
              value={newWeight}
              onChangeText={setNewWeight}
              placeholder="‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å (kg)"
              keyboardType="numeric"
            />
            {/* <TextInput
              style={styles.inputWeigh}
              value={newDate}
              onChangeText={setNewDate}
              placeholder="‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà (DD/MM/YYYY)"
            /> */}
            <View style={styles.modalbackButton}>
              <TouchableOpacity onPress={handleSaveData} style={styles.modalButton}>
                <Text style={styles.modalButtonText}>‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å</Text>
              </TouchableOpacity>
              <TouchableOpacity onPress={handleCancel} style={styles.backButton}>
                <Text style={styles.backButtonText}>‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å</Text>
              </TouchableOpacity>
            </View>
          </View>
        </View>
      </Modal>

      <CustomAlertSaveWeight visible={isSaveAlertVisible} onClose={() => setSaveAlertVisible(false)} />
    </View>
  );
};

const styles = StyleSheet.create({
  container: { flex: 1, backgroundColor: "#FFF" },
  weightgraphHeader: { flexDirection: "column", justifyContent: "space-between", backgroundColor: "#F6A444", marginTop: 20 },
  graphTitle: { color: "#FFF", fontSize: 20, top: "32%", left: 30, fontFamily: "appfont_01" },
  graphContainer: { backgroundColor: '#FFECB3', padding: 10 },
  graphHeader: { backgroundColor: '#fff', padding: 5, borderRadius: 10, position: "absolute", top: "32%", right: 20, paddingHorizontal: 20 },
  graphsaveButtonText: { color: '#F6A444', fontSize: 16, fontFamily: 'appfont_02' },
  modalContainer: { flex: 1, justifyContent: "center", alignItems: "center", backgroundColor: "rgba(0,0,0,0.5)" },
  modalContent: { width: "80%", padding: 20, backgroundColor: "#FFF", borderRadius: 10 },
  modalTitle: { fontSize: 18, marginBottom: 15, textAlign: "center", fontFamily: 'appfont_01' },
  inputWeigh: { borderColor: "#dcdcdc", borderWidth: 1, borderRadius: 5, marginBottom: 10, paddingHorizontal: 10 },
  modalbackButton: { flexDirection: "row", justifyContent: "space-evenly" },
  modalButton: { backgroundColor: '#F6A444', padding: 10, paddingHorizontal: 25, borderRadius: 5, alignItems: 'center', marginTop: 10 },
  backButton: { backgroundColor: '#F6A444', padding: 10, paddingHorizontal: 25, borderRadius: 5, alignItems: 'center', marginTop: 10 },
  modalButtonText: { color: '#FFF', fontFamily: 'appfont_02' },
  backButtonText: { color: '#FFF', fontFamily: 'appfont_02' },
  noDataText: { textAlign: "center", marginTop: 20, fontSize: 16, color: "#888" },
  customAlertContainer: { flex: 1, justifyContent: "center", alignItems: "center", backgroundColor: "rgba(0, 0, 0, 0.5)" },
  customAlertBox: { width: 320, padding: 10, borderRadius: 10, alignItems: "center", backgroundColor: "#F9E79F", borderColor: "#E97424", borderWidth: 6 },
  customAlertBoxGraph: { width: 280, padding: 10, borderRadius: 10, alignItems: "center", backgroundColor: "#F9E79F", borderColor: "#E97424", borderWidth: 6 },
  weightDisplay: { flexDirection: "row", alignItems: "center", justifyContent: "center", marginBottom: 10 },
  customAlertTitle: { fontSize: 20, fontFamily: "appfont_02", marginBottom: 3 },
  customAlertMessage: { fontSize: 16, fontFamily: "appfont_01", marginBottom: 10 },
  customAlertMessageText: { fontSize: 16, fontFamily: "appfont_01" },
  customAlertMessageGraph: { fontSize: 32, fontFamily: "appfont_01", marginRight: 8 },
  customAlertButtonText: { fontSize: 18, textAlign: "center", color: "white", fontFamily: "appfont_02" },
  customAlertButton: { backgroundColor: "#e59400", color: "white", borderRadius: 10, padding: 2, alignItems: "center", width: "25%" },
  weightSummaryContainer: { flexDirection: "row", justifyContent: "space-between", alignItems: "center", paddingHorizontal: 20 },
  currentWeightContainer: { alignItems: "flex-start" },
  weightLabel: { fontSize: 16, color: "#444", fontFamily: "appfont_02" },
  weightValueContainer: { flexDirection: "row", alignItems: "baseline" },
  currentWeight: { fontSize: 32, fontWeight: "bold", color: "#222" },
  weightUnit: { fontSize: 18, fontWeight: "bold", color: "#444", marginLeft: 5, fontFamily: "appfont_02" },
  weightStatsContainer: { alignItems: "flex-end" },
  weightStatLabel: { fontSize: 14, color: "#666", fontFamily: "appfont_02" },
  weightStatValue: { fontSize: 16, fontWeight: "bold", color: "#222", fontFamily: "appfont_02" },
});

export default WeightRecords;
