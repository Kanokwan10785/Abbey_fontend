import { View, Text, StyleSheet, TextInput, TouchableOpacity, Modal, Alert, ScrollView,SafeAreaView } from 'react-native'; // ‡πÄ‡∏û‡∏¥‡πà‡∏° ActivityIndicator
import { Image, ImageBackground } from 'expo-image';
import React, { useState, useEffect } from 'react';
import Colors from '../Shared/Colors';
import loginImage from '../../assets/image/login.png';
import grass from '../../assets/image/Background-Theme/gym-03.gif';
import { login } from './api';
import AsyncStorage from '@react-native-async-storage/async-storage';
import { useNavigation } from '@react-navigation/native';
import { fetchUserProfile, beginnerClothingItem, fetchUserOutfit, fetchItemsData, fetchUserFoodQuantity, buyFoodItemBeginner } from './api';
import { saveHeightUesr } from './apiExercise';
import Icon from 'react-native-vector-icons/Ionicons';

export default function Loginpage() {
    const navigation = useNavigation();
    const [username, setUsername] = useState('');
    const [password, setPassword] = useState('');
    const [secureTextEntry, setSecureTextEntry] = useState(true);
    const [loading, setLoading] = useState(false);  // ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Loading Screen
    const [alertVisible, setAlertVisible] = useState(false);
    const [alertMessage, setAlertMessage] = useState("");


    const togglePasswordVisibility = () => {
        setSecureTextEntry(!secureTextEntry);
    };

    const handleLogin = async () => {
        if (!username || !password) {
            setAlertMessage('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÅ‡∏•‡∏∞‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô');
            setAlertVisible(true);
            return;
        }
    
        try {
            setLoading(true);  // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
            const response = await login(username, password);
            const userId = response.user.id; 
            const jwt = response.jwt;
            const bmi = response.user.BMI;
            console.log('‚úÖ Login successful:', response);
            await AsyncStorage.setItem('jwt', jwt); // ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
            await AsyncStorage.setItem(`bmi-${userId}`, bmi ? bmi.toString() : "N/A");
            await AsyncStorage.setItem('userId', userId.toString()); // ‡πÄ‡∏Å‡πá‡∏ö userId ‡πÉ‡∏ô AsyncStorage

                // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
            try {
                const userData = await fetchUserProfile(userId);
                // console.log('User data loaded:', userData);
            } catch (profileError) {
                console.warn('Failed to fetch user profile, but continuing login:', profileError);
            }

            // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡πà‡∏≤ BMI
            const userData = await fetchUserProfile(userId);
            let userBmi = userData.BMI || null;
            const userWeight = userData.weight || 0;
            const userHeight = userData.height || 0;

            if (userBmi === null && userHeight > 0 && userWeight > 0) {
                // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì BMI ‡πÉ‡∏´‡∏°‡πà
                const heightInMeters = userHeight / 100;
                const calculatedBmi = (userWeight / (heightInMeters * heightInMeters)).toFixed(2);

                // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ñ‡πà‡∏≤ BMI ‡∏ö‡∏ô‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå
                await saveHeightUesr(userHeight, calculatedBmi, userId);
                console.log('Updated BMI on login:', calculatedBmi);
            }

            // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏™‡∏∑‡πâ‡∏≠‡∏ú‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏à‡∏≤‡∏Å‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå
            const savedOutfit = await fetchUserOutfit(userId, jwt);
            if (savedOutfit) {
                await AsyncStorage.setItem(`userOutfit-${userId}`, JSON.stringify(savedOutfit));
                console.log('‚úÖ Loaded outfit from server:', savedOutfit);
            }

            // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÑ‡∏≠‡πÄ‡∏ó‡πá‡∏°‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÉ‡∏´‡πâ‡∏Å‡∏±‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
            // console.log("Adding beginner clothing items...");
            const beginnerItems = [
                { id: 5, label: 'K00' } // ‡πÑ‡∏≠‡πÄ‡∏ó‡πá‡∏°‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
            ];

            for (const item of beginnerItems) {
                await beginnerClothingItem(userId, item.id, item.label);
                // console.log(`Beginner Clothing Item Response for ${item.label}:`, result);
            }

            const mapFoodNameToEnglish = (thaiName) => {
                const foodMapping = {
                    "‡πÅ‡∏≠‡∏õ‡πÄ‡∏õ‡∏¥‡πâ‡∏•": "apple",
                    "‡πÅ‡∏ï‡∏á‡πÇ‡∏°": "watermelon",
                    "‡∏õ‡∏•‡∏≤‡∏ó‡∏≠‡∏î": "fried fish",
                    "‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏¢‡πà‡∏≤‡∏á": "roast beef",
                    "‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÄ‡∏Å‡∏≠‡∏£‡πå": "hamburger",
                    "‡∏ô‡πà‡∏≠‡∏á‡πÑ‡∏Å‡πà‡∏ó‡∏≠‡∏î": "fried chicken"
                };
                return foodMapping[thaiName] || thaiName; // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏û‡∏ö ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏î‡∏¥‡∏°
            };
            
            // ‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏°‡∏µ
            const userFoodData = await fetchUserFoodQuantity(userId);
            const userFoodNames = userFoodData.map(f => f.buy_food); // ‡πÄ‡∏õ‡πá‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡∏†‡∏≤‡∏©‡∏≤‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏©
            
            console.log("üìå ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß (EN):", userFoodNames);
            
            // ‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
            const foodItems = await fetchItemsData();
            const foodCategoryItems = foodItems.filter(item => item.attributes.category === 'Food-item');
            
            // ‚úÖ ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÑ‡∏°‡πà‡∏°‡∏µ ‡πÇ‡∏î‡∏¢‡πÅ‡∏õ‡∏•‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡πá‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏©‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö
            const missingFoodItems = foodCategoryItems.filter(item => {
                const englishFoodName = mapFoodNameToEnglish(item.attributes.name);
                return !userFoodNames.includes(englishFoodName);
            });
            
            console.log("üö® ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ (‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏û‡∏¥‡πà‡∏°):", missingFoodItems.map(item => item.attributes.name));
            
            // ‚úÖ POST ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏´‡∏°‡∏ß‡∏î‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏Ç‡∏≤‡∏î
            for (const foodItem of missingFoodItems) {
                const englishFoodName = mapFoodNameToEnglish(foodItem.attributes.name);

                console.log(`üì§ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏≠‡∏≤‡∏´‡∏≤‡∏£: ${foodItem.attributes.name} (${englishFoodName})`);

                const result = await buyFoodItemBeginner(userId, foodItem.id, englishFoodName, 0);

                if (result.success === false) { // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ success = false ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
                    console.error(`‚ùå ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: ${englishFoodName}`);
                }
            }

            // ‡πÅ‡∏™‡∏î‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏£‡∏≠‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
            setTimeout(() => {
                setLoading(false);  // ‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô
                navigation.navigate('HomeScreen');  // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏´‡∏ô‡πâ‡∏≤ HomeScreen
            }, 100);  // ‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î 8 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
        } catch (error) {
            // ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏°‡∏≤‡∏Å‡∏Ç‡∏∂‡πâ‡∏ô
            if (error.response) {
                const statusCode = error.response.status;
                const errorData = error.response.data;
            
                // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ API ‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏≠‡∏∞‡πÑ‡∏£
                let errorMessage = "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö";
            
                if (errorData && errorData.error) {
                    const apiMessage = errorData.error.message;
            
                    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏•‡∏∞‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢
                    if (apiMessage.includes("Invalid identifier or password")) {
                        errorMessage = "‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏´‡∏£‡∏∑‡∏≠‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á";
                    } else if (apiMessage.includes("User not found")) {
                        errorMessage = "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ô‡∏µ‡πâ";
                    } else if (apiMessage.includes("Your account has been blocked")) {
                        errorMessage = "‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏ñ‡∏π‡∏Å‡∏£‡∏∞‡∏á‡∏±‡∏ö";
                    } else {
                        errorMessage = apiMessage; // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏ï‡∏£‡∏á ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≤‡∏Å API ‡∏ï‡∏£‡∏á‡πÜ
                    }
                }
            
                setAlertMessage(`${errorMessage}`);
                setAlertVisible(true);
            } else if (error.request) {
                setAlertMessage('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå');
                setAlertVisible(true);
            } else {
                setAlertMessage(`${error.message}`);
                setAlertVisible(true);
            }                     
    
            // ‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á Loading ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î
            setAlertVisible(true);
            setLoading(false);
            console.error('Login error details:', error.response ? error.response.data : error.message);
        }
    };
    
    if (loading) {
        return (
            <ImageBackground source={grass} style={styles.loadingContainer}>
                {/* <ActivityIndicator size="large" color="#00ff00" />
                <Text style={styles.loadingText}>‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•...</Text> */}
            </ImageBackground>
        );
    }

    const CustomAlertModal = ({ visible, message, onClose }) => (
        <Modal animationType="fade" transparent={true} visible={visible} onRequestClose={onClose}>
            <View style={styles.customAlertContainer}>
                <View style={styles.customAlertBox}>
                    <Text style={styles.customAlertTitle}>‡∏•‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏ä‡πâ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à</Text>
                    <Text style={styles.customAlertMessage}>{message}</Text>
                    <TouchableOpacity style={styles.customAlertButton} onPress={onClose}>
                        <Text style={styles.customAlertButtonText}>OK</Text>
                    </TouchableOpacity>
                </View>
            </View>
        </Modal>
    );    

    return (
        <SafeAreaView style={styles.container}>
            <ScrollView contentContainerStyle={styles.scrollViewContent}>
                <View style={styles.innerContainer}>
                    <Image source={loginImage} style={styles.image} />
                    <Text style={styles.header}>‡∏•‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏ä‡πâ</Text>
                    <TextInput
                        style={styles.input}
                        placeholder="‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ"
                        value={username}
                        onChangeText={setUsername}
                    />
                    <View style={styles.passwordContainer}>
                        <TextInput
                            style={styles.passwordInput}
                            placeholder="‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô"
                            secureTextEntry={secureTextEntry}
                            value={password}
                            onChangeText={setPassword}
                        />
                        <TouchableOpacity onPress={togglePasswordVisibility} style={styles.eyeIcon}>
                            <Icon name={secureTextEntry ? "eye-off" : "eye"} size={24} color="gray" />
                        </TouchableOpacity>
                    </View>
                    
                    <TouchableOpacity style={styles.buttonlogin} onPress={handleLogin}>
                        <Text style={styles.buttonText}>‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö</Text>
                    </TouchableOpacity>
                    <View style={styles.footer}>
                        <Text style={styles.footerText}>‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡πÉ‡∏ä‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?</Text>
                        <Text style={styles.registerText} onPress={() => navigation.navigate('Register')}>
                            ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ö‡∏±‡∏ç‡∏ä‡∏µ
                        </Text>
                    </View>
                </View>
            </ScrollView>
            <CustomAlertModal 
        visible={alertVisible} 
        message={alertMessage} 
        onClose={() => setAlertVisible(false)} 
        />
        </SafeAreaView>
    );
}

const styles = StyleSheet.create({
    container: { flex: 1, backgroundColor: Colors.yellow },
    scrollViewContent: { flexGrow: 1, justifyContent: 'center', alignItems: 'center' },
    innerContainer: { backgroundColor: Colors.while, padding: 40, paddingTop: 60, alignItems: 'center', borderRadius: 40, width: '90%' },
    image: { width: 300, height: 250 },
    header: { fontSize: 30, marginTop: 20, marginBottom: 40, color: Colors.yellow, fontFamily: 'appfont_02' },
    input: { width: '100%', padding: 20, borderWidth: 1, borderColor: '#ccc', borderRadius: 10, marginBottom: 20, fontFamily: 'appfont_01' },
    passwordContainer: { flexDirection: 'row', alignItems: 'center', width: '100%', borderWidth: 1, borderColor: '#ccc', borderRadius: 10, paddingRight: 15, marginBottom: 30 },
    passwordInput: { flex: 1, padding: 20, fontFamily: 'appfont_01' },
    eyeIcon: { padding: 10 },
    buttonlogin: { backgroundColor: Colors.yellow, padding: 10, borderRadius: 50, width: '100%', marginTop: 20, alignItems: 'center' },
    buttonText: { fontSize: 20, color: Colors.while, fontFamily: 'appfont_01' },
    footer: { flexDirection: 'row', marginTop: 20 },
    footerText: { marginRight: 10, fontFamily: 'appfont_01' },
    registerText: { color: Colors.yellow, fontFamily: 'appfont_01' },
    customAlertContainer: { flex: 1, justifyContent: "center", alignItems: "center", backgroundColor: "rgba(0, 0, 0, 0.5)" },
    customAlertBox: { width: 350, padding: 10, borderRadius: 10, alignItems: "center", backgroundColor: "#F9E79F", borderColor: "#E97424", borderWidth: 6 },
    customAlertTitle: { fontSize: 20, fontFamily: "appfont_02", marginBottom: 5 },
    customAlertMessage: { fontSize: 16, fontFamily: "appfont_01", marginBottom: 15, textAlign: "center" },
    customAlertButton: { backgroundColor: "#e59400", borderRadius: 25, padding: 10, alignItems: "center", width: "30%" },
    customAlertButtonText: { fontSize: 18, textAlign: "center", color: "white", fontFamily: "appfont_02" }
});